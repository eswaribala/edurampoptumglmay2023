schema {
    query:Query
    mutation: Mutation
    subscription: Subscription

}

#interface Customer{
#
#    accountNo: ID!
#    name: FullName
#    contactNo: Int
#    email: String
#    password: String
#}
union Customer = Individual | Corporate
type FullName{
    firstName: String
    lastName: String
    middleName: String
}

type Individual {
    accountNo: ID!
    name: FullName
    contactNo: Int
    email: String
    password: String
    gender: Gender
    dob: String
}
enum Gender{
    MALE
    FEMALE
    TRANSGENDER
}


input IndividualInput{
    accountNo: ID!
    name: FullNameInput
    contactNo: Int
    email: String
    password: String
    gender: Gender
    dob: String
}

input FullNameInput{
    firstName: String
    lastName: String
    middleName: String
}

type IndividualContactNo {
    accountNo: Int
    contactNo: Int
    timestamp: String
}

type Query{

    findAllIndividuals:[Individual]
    findIndividualById(accountNo: Int):Individual
    findIndividualByName(firstName: String):[Individual]

}

type Mutation{

    addIndividual(individualInput: IndividualInput):Individual
    updateIndividual(individualInput:IndividualInput):Individual
    deleteIndividual(accountNo: Int): Boolean
}

type Subscription {
    individualContactNo(accountNo: Int): IndividualContactNo

}
